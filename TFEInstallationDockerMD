pipeline {
  agent any

  environment {
    GOOGLE_APPLICATION_CREDENTIALS = credentials('gcp-sa-key') // Jenkins credential ID
    TF_VAR_gcp_project             = 'hc-83b62b0958c0408887c53f13da1'
    TF_VAR_ssh_user                = 'jenkins' // Ensure this user exists and has permissions
    TF_VAR_ssh_pub_key             = credentials('gcp-ssh-pubkey') // Jenkins credential ID
    TFE_LICENSE                    = credentials('tfe-license')
    TFE_VERSION                    = 'v202410-1'
    DOMAIN_NAME                    = 'ksfdomd.kunalsingh-17b577.gcp.sbx.hashicorpdemo.com'
    ZONE                           = 'us-central1-a' // Update as per your deployment
    NETWORK                        = 'default' // Update if using custom VPC
    RULE_NAME                      = 'allow-http-jenkins'
  }

  stages {
    stage('Clone Compose Template') {
      steps {
        git branch: 'main', url: 'https://github.com/kunal-hashicorp/DockerCompose.git'
      }
    }

    stage('Generate compose.yml from template') {
      steps {
        sh '''
          mkdir -p fdo-test
          sed -e s|__TFE_VERSION__|${TFE_VERSION}|g \
              -e s|__TFE_LICENSE__|${TFE_LICENSE}|g \
              -e s|__DOMAIN_NAME__|${DOMAIN_NAME}|g \
              DockerCompose/compose-template.yml > fdo-test/compose.yml
        '''
      }
    }

    stage('Create firewall rule (if not exists)') {
      steps {
        sh '''
          if ! gcloud compute firewall-rules describe ${RULE_NAME} --project=${TF_VAR_gcp_project}; then
            gcloud compute firewall-rules create ${RULE_NAME} \
              --project=${TF_VAR_gcp_project} \
              --allow tcp:80 \
              --direction=INGRESS \
              --priority=1000 \
              --network=${NETWORK} \
              --source-ranges=0.0.0.0/0 \
              --target-tags=http-server
          else
            echo "Firewall rule '${RULE_NAME}' already exists"
          fi
        '''
      }
    }

    stage('Upload compose.yml to VM') {
      steps {
        sshagent(['jenkins']) {
          sh '''
            ssh -o StrictHostKeyChecking=no jenkins@34.16.46.234 'mkdir -p /home/jenkins/fdo-test'
            scp -o StrictHostKeyChecking=no fdo-test/compose.yml jenkins@34.16.46.234:/home/jenkins/fdo-test/
          '''
        }
      }
    }

    stage('Install TFE') {
      steps {
        sshagent(['jenkins']) {
          sh '''
            ssh -o StrictHostKeyChecking=no jenkins@34.16.46.234 '
              cd /home/jenkins/fdo-test &&
              docker compose -f compose.yml up -d
            '
          '''
        }
      }
    }
  }
}
